AWSTemplateFormatVersion: "2010-09-09"
Description: This CFN Template launches an EC2 instance, an autoscaling group,and an application load balancer. Created by Group 4

Parameters:
  
  InstanceAmiId:
    Type: String
    Description: The AMI ID to use in launching the EC2 instance.
    Default: "ami-03a6eaae9938c858c"
  
  VPC:
    Type: String
    Description: A virtual private cloud
    Default: "vpc-00f9c4d2d7ac05ec4"
   
  PrivateSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The Subnets to launch the EC2 instance into. Also implies the VPC (It is deployed into private subnet(s)).

  PublicSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The Subnets to launch the Load Balancer instance into. Also implies the VPC (It is deployed into public subnet(s)).
    
  Region:
    Type: String
    Description: The region to deploy the EC2 instance in.
    Default: us-east-1


Resources: 
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group for group 4
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for group 4
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ELBSecurityGroup
          - GroupId


  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: Group4EC2TargetGroup
      Port: 443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:920119599456:certificate/12bc1f4c-7b94-48b8-867f-f4310f91c845

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets

  # MyIPSetDenylist: 
  #   Type: AWS::WAF::IPSet
  #   Properties: 
  #     Name: IPSet to deny listed IP addresses
  #     IPSetDescriptors: 
  #       - 
  #         Type: IPV4
  #         Value: 192.0.2.44/32
  #       - 
  #         Type: IPV4
  #         Value: 192.0.7.0/24

  # MyIPSetRule: 
  #   Type: AWS::WAF::Rule
  #   Properties: 
  #     Name: MyIPSetRule
  #     MetricName: MyIPSetRule
  #     Predicates: 
  #       - 
  #         DataId: 
  #           Ref: MyIPSetDenylist
  #         Negated: false
  #         Type: IPMatch
  
  # MyWebACL: 
  #   Type: AWS::WAF::WebACL
  #   Properties: 
  #     Name: WebACL to block IP addresses
  #     DefaultAction: 
  #       Type: ALLOW
  #     MetricName: MyWebACL
  #     Rules: 
  #       - 
  #         Action: 
  #           Type: BLOCK
  #         Priority: 1
  #         RuleId: 
  #           Ref: MyIPSetRule

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref InstanceAmiId
        InstanceType: t2.micro
        SecurityGroupIds: 
        - !Ref EC2SecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags: 
          - Key: Name
            Value: Group4-instance

        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "[B3C3 INFO] ###Beginning of B3C3 User Data Script"
            echo "[B3C3 INFO] Installing Java on the Instance"
            dnf install -y java
            echo "[B3C3 INFO] Installing ruby and wget"
            dnf install -y ruby wget
            echo "[B3C3 INFO] Using wget to download Code Deploy Agent Install Script"
            wget -O /tmp/cdagent_install https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            echo "[B3C3 INFO] Making the Code Deploy Agent Install Script Executable"
            chmod +x /tmp/cdagent_install
            echo "[B3C3 INFO] Installing and Starting the Amazon Code Deploy Agent using the Install Script"
            /tmp/cdagent_install auto
            echo "[B3C3 INFO] Checking the status of Code Deploy Agent via systemctl"
            systemctl status codedeploy-agent
            echo "[B3C3 INFO] End of B3C3 User Data Script###"
            yum install -y httpd systemctl start httpd systemctl enable httpd echo "<h1>Hello World!</h1>" > /var/www/html/index.html
 
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      TargetGroupARNs: 
        - !Ref EC2TargetGroup
      VPCZoneIdentifier: !Ref PrivateSubnets

# End of CFN Template
