AWSTemplateFormatVersion: "2010-09-09"
Description: "CI-CD pipeline for deploying a website to EC2 instances."

Parameters:
  ProjectName:
    Description: "Name of the project"
    Type: String

  InstanceAmiId:
    Type: String
    Description: "The AMI ID to use in launching the EC2 instance."
    Default: "ami-03a6eaae9938c858c"

  VPC:
    Type: String
    Description: "Virtual Private Cloud ID"
    Default: "vpc-00f9c4d2d7ac05ec4"

  PrivateSubnets:
    Type: String
    Description: "Private subnets for EC2 instances."
    Default: "subnet-0c16ce81d84e81084"

  PublicSubnet1:
    Type: String
    Description: "Public subnets for the Load Balancer instance."
    Default: "subnet-047d62be8b0e43286"

  Region:
    Type: String
    Description: "Region to deploy the EC2 instance."
    Default: "us-east-1"

  InstanceProfileArn:
    Type: String
    Description: "ARN of the Instance Profile to attach to the EC2 instance."
    Default: "cil-academy-ec2-ssm-role"
  
  CodeDeployTag:
    Type: String
    Description: "Tag to attach to the EC2 instance for CodeDeploy Agent."
    Default: ""

Conditions:
  CodeDeployTagParamterIsAvailable: !Not [!Equals [!Ref CodeDeployTag, ""]]

Resources:

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ELB Security Group for the project"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EC2 Security Group for the project"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ELBSecurityGroup
          - GroupId

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: "ProjectEC2TargetGroup"
      Port: 443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: "arn:aws:acm:us-east-1:920119599456:certificate/12bc1f4c-7b94-48b8-867f-f4310f91c845"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-load-balancer"
      Scheme: "internet-facing"
      Subnets: 
        - subnet-047d62be8b0e43286
        - subnet-0456ec2b418f19046
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId
  
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-launch-template"
      LaunchTemplateData:
        ImageId: !Ref InstanceAmiId
        InstanceType: "t2.micro"
        SecurityGroupIds: 
          - !Ref EC2SecurityGroup
        IamInstanceProfile: !Ref InstanceProfileArn
        UserData:
          Fn::Base64: |
            #!/bin/bash
            echo "[INFO] ###Beginning of User Data Script"
            echo "[INFO] Installing Java on the Instance"
            dnf install -y java
            echo "[INFO] Installing ruby and wget"
            dnf install -y ruby wget
            echo "[INFO] Using wget to download Code Deploy Agent Install Script"
            wget -O /tmp/cdagent_install https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            echo "[INFO] Making the Code Deploy Agent Install Script Executable"
            chmod +x /tmp/cdagent_install
            echo "[INFO] Installing and Starting the Amazon Code Deploy Agent using the Install Script"
            /tmp/cdagent_install auto
            echo "[INFO] Checking the status of Code Deploy Agent via systemctl"
            systemctl status codedeploy-agent
            echo "[INFO] End of User Data Script###"
            yum install -y httpd systemctl start httpd systemctl enable httpd echo "<h1>Hello World!</h1>" > /var/www/html/index.html
    
      TagSpecifications:
        - ResourceType: "instance"
          Tags:
            - key: "Name"
              value: "Project-instance"
            - Key: "ProjectName"
              Value: !Ref ProjectName
            - Key: "Region"
              Value: !Ref Region
            - Key: "CodeDeployTag"
              Value: !If [CodeDeployTagParamterIsAvailable, !Ref CodeDeployTag, !Ref AWS::StackName]

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      TargetGroupARNs: 
        - !Ref EC2TargetGroup
      VPCZoneIdentifier: !Ref PrivateSubnets

  # CI/CD Pipeline Resources
  
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "artifact-bucket-project"
        
  PipelineRole:  
    Type: AWS::IAM::Role  
    Properties:  
      RoleName: !Sub ${ProjectName}-pipeline-role  
      AssumeRolePolicyDocument:  
        Version: "2012-10-17"  
        Statement:  
          Effect: Allow  
          Principal:  
            Service: 
              - codepipeline.amazonaws.com  
          Action: "sts:AssumeRole"  
      Path: /  
      Policies:  
      -
        PolicyName: ArtifactAccess
        PolicyDocument:  
          Version: '2012-10-17'  
          Statement:  
          -   
            Action:  
              - 's3:GetObject'  
              - 's3:GetObjectVersion'  
              - 's3:GetBucketVersioning'  
              - 's3:PutObject'  
            Effect: Allow  
            Resource:   
              - !Join ['',['arn:aws:s3:::', !Ref ArtifactBucket ]]
              - !Join ['',['arn:aws:s3:::', !Ref ArtifactBucket , '/*']]
      -
        PolicyName: CloudwatchLogs
        PolicyDocument:  
          Version: '2012-10-17'  
          Statement:  
          -   
            Action:  
              - 'cloudwatch:*' 
            Effect: Allow  
            Resource:   
              - "*"
 
      -   
        PolicyName: GitAccess  
        PolicyDocument:  
          Version: '2012-10-17'  
          Statement:  
          -  
            Effect: Allow  
            Action:  
              - codecommit:Get*  
              - codecommit:List*  
              - codecommit:GitPull  
              - codecommit:BatchGetRepositories  
              - codecommit:CancelUploadArchive  
              - codecommit:UploadArchive  
            Resource: "*"  
      -
        PolicyName: CodeBuildAccess  
        PolicyDocument:  
          Version: '2012-10-17'  
          Statement:  
          -   
            Action:  
              - 'codebuild:StartBuild'  
              - 'codebuild:StopBuild'  
              - 'codebuild:BatchGetBuilds'  
            Effect: Allow  
            Resource:  
              - !GetAtt DeployBuild.Arn

  CodeBuildRole:  
    Type: AWS::IAM::Role  
    Properties:  
      RoleName: !Sub "${ProjectName}-codebuild-role"  
      AssumeRolePolicyDocument:  
        Version: 2012-10-17
        Statement:  
          Effect: Allow  
          Principal:  
            Service: 
              - codebuild.amazonaws.com
          Action: "sts:AssumeRole"
      Policies:   
        -   
          PolicyName: "CodebuildAccess"  
          PolicyDocument:   
            Version: "2012-10-17"  
            Statement:   
              -   
                Effect: "Allow"  
                Action:                     
                  - "s3:*"
                  - "logs:*"
                Resource: "*" 
   
  DeployBuild:  
    Type: AWS::CodeBuild::Project  
    Properties:  
      Name: !Sub "${ProjectName}-Deploy"  
      ServiceRole: !Ref CodeBuildRole
      Artifacts:  
        Type: "CODEPIPELINE"
      Environment:  
        ComputeType: "BUILD_GENERAL1_SMALL" 
        Image: "aws/codebuild/standard:5.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:  
          - Name: WEBSITE_SERVER_NAME  
            Value: !Ref LaunchTemplate 
      Source:  
        Type: "CODEPIPELINE"
        BuildSpec: "buildspec.yml"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${ProjectName}-pipeline"
      RoleArn: !GetAtt PipelineRole.Arn  
      ArtifactStore:  
        Type: "S3"
        Location: !Ref ArtifactBucket
      Stages:
      - Name: "CodeCommitSource"  
        Actions:  
        - InputArtifacts: []  
          Name: "code"  
          RunOrder: 1  
          ActionTypeId:  
            Category: "Source"  
            Owner: "AWS"  
            Version: 1  
            Provider: "CodeCommit"  
          OutputArtifacts:  
          - Name: "CodeWorkspace"  
          Configuration:  
            RepositoryName: "Project_Repo"
            BranchName: "main"  
            PollForSourceChanges: "true"
      - Name: "DevelopAndDeploy"
        Actions:  
        - Name: "Deploy-to-EC2" 
          RunOrder: 5
          ActionTypeId:  
            Category: "Build"  
            Owner: "AWS"  
            Version: '1'  
            Provider: "CodeBuild"  
          InputArtifacts:  
          - Name: "CodeWorkspace"  
          Configuration:  
            ProjectName: !Ref DeployBuild

Outputs:
  EC2InstanceId:
    Value: !Ref AutoScalingGroup  # Use AutoScalingGroup as EC2 instances are managed by it

  EC2CodeDeployTag:
    Value: !If [CodeDeployTagParamterIsAvailable, !Ref CodeDeployTag, !Ref AWS::StackName]
